
import java.util.*;
public class Astar {

	public Astar(String filename){
		//since most of the code remains the same, A* Search only invokes a BFS, but makes it use a priority queue instead
		BFS search = new BFS(filename,true);
	}

}


import java.util.*;

public class CostComparator implements Comparator<BNode> {

	public int compare(BNode x, BNode y) {
		if(x.cost < y.cost){
			return -1;
		}
		else if (x.cost > y.cost){
			return 1;
		}
		return 0;
	}
}



import java.util.*;

public class BFS {
	
	Queue<BNode> fringe; //queue for BFS
	boolean[][] alreadyVisited; //keeps track of places in map that have already been explored
	Map mapToSearch;
	BNode root;
	boolean aStar;
	Comparator <BNode> nodeCost = new CostComparator(); //for priority queue use
	int nodesInMemory;
	int nodesExpanded;
	
	public BFS(String filename, boolean aStarMode){ 
	    mapToSearch = new Map(filename); //initialize map from txt file
	    alreadyVisited = new boolean[mapToSearch.rows][mapToSearch.columns];
	    aStar = aStarMode;
	    nodesInMemory = 0;
	    nodesExpanded = 0;
	    
	    if(aStar){
	    	//create a queue depending on what type of search is being made
	    	fringe = new PriorityQueue<BNode>(nodeCost); //A* search
	    }
	    else{
	    	fringe = new LinkedList<BNode>(); //BFS
	    }
		root = new BNode(mapToSearch.start.x , mapToSearch.start.y, mapToSearch, aStar); //set the root node
		BNode result = doSearch(); //perform BFS
		
		if(result!= null){
			printPath(result); //get result and path taken if goal was reached
		}
		else{
			System.out.println("Path Cost: -1"); //solution not found
			System.out.println("Path Taken: NULL");
		}
	}
	
	public void printPath(BNode result){ //print out the final path taken
		BNode current = result;
		String path = " ";
		System.out.println("Path cost: "+ result.cost);
		System.out.println("Nodes expanded: " + nodesExpanded);
		System.out.println("Maximum number of nodes in memory: " + nodesInMemory);
		System.out.println(" ");
		System.out.println("Path taken: ");
		while(current != null){
			path = "\n" + current.toString() + path;
			current = current.parent;
		}
		System.out.println(path);
	}
	
	public BNode doSearch(){
		fringe.add(root);
		while(!fringe.isEmpty()){
			nodesInMemory = Math.max(nodesInMemory, fringe.size()); //keeps the max value of nodes in memory
			//System.out.println(fringe.toString());
			BNode candidate = fringe.remove(); //remove node from the queue
			if(isGoal(candidate)){
				return candidate; //check if solution
			}
			else{
				alreadyVisited[candidate.location.y][candidate.location.x] = true;
				BNode[]children = expand(candidate); //create nodes based on the neighbors of the current node
				for(int i = 0; i<children.length;i++){
					fringe.add(children[i]);
				}
			}
		}
		return null; //failure
	}
	
	public boolean isGoal(BNode c){ //short method to determine if current node is at the goal coordinate
		int goalX = mapToSearch.goal.x;
		int goalY = mapToSearch.goal.y;
		if((c.location.x == goalX) && (c.location.y == goalY)){
			return true;
		}
		return false;
	}
	
	public BNode[] expand(BNode c){
		//helper method for BFS that creates nodes for all neighbors of a current node
		nodesExpanded++;
		LinkedList<Coordinate> goodMoves = createValidCoordinates(c); //get list of feasible moves
		int sizeOfList = goodMoves.size(); //keep the value of good moves obtained
		BNode[] children = new BNode [sizeOfList];
		for(int i = 0; i<sizeOfList;i++){
			Coordinate k = goodMoves.poll();
			children[i]	= new BNode(c, k , mapToSearch,aStar); //create a node per possible move
		}
		return children; //return all created nodes 
		
	}
	
	public LinkedList<Coordinate> createValidCoordinates(BNode c){
		//helper method for expand()
		LinkedList<Coordinate> possibleNeighbors = new LinkedList<Coordinate>(); //set that stores coordinates
		//check if all possible moves are feasible
		evaluateCoordinate(possibleNeighbors,c.location.x, (c.location.y)+1);
		evaluateCoordinate(possibleNeighbors,(c.location.x)+1, c.location.y);
		evaluateCoordinate(possibleNeighbors,c.location.x, (c.location.y)-1);
		evaluateCoordinate(possibleNeighbors,(c.location.x)-1, c.location.y);
		return possibleNeighbors;
	}
	
	public void evaluateCoordinate(LinkedList<Coordinate> p,int x, int y){ 
		//checks if a coordinate does not go out of bounds or land in a space in the map that is marked as 0
		int yBound = mapToSearch.rows;
		int xBound = mapToSearch.columns;
		
		if((x < xBound) && (y < yBound) && (x > -1) && (y > -1)){ //check if it stays in bounds
			if((mapToSearch.mapArray[y][x] != 0) && (!alreadyVisited[y][x])){ //check if terrain is passable
				Coordinate neighbor = new Coordinate(x,y); 
				p.add(neighbor); //if the move can be made, add it to the list
				
			}
		}
	}

}
